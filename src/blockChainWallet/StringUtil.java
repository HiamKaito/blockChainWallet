package blockChainWallet;

import java.security.Key;
import java.security.MessageDigest;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.util.ArrayList;
import java.util.Base64;

/**
 * Class helper: bao g·ªìm c√°c h√†m m√£ h√≥a v√† gi·∫£i m√£
 * @author Hiam
 */
public class StringUtil {
	/**
	 * √?p d·ª•ng Sha256 cho m·ªôt chu·ªói v√† tr·∫£ v·ª? k·∫øt qu·∫£.
	 * @param input String chu·ªói c·∫ßn m√£ h√≥a
	 * @return ch·ªØ k√Ω
	 */
	public static String applySha256(String input) {
		try {
			MessageDigest digest = MessageDigest.getInstance("SHA-256");
			
			// √?p d·ª•ng sha256 cho ƒë·∫ßu v√†o c·ªßa ch√∫ng t√¥i,
			byte[] hash = digest.digest(input.getBytes("UTF-8"));
			StringBuffer hexString = new StringBuffer(); 
			
			for (int i = 0; i < hash.length; i++) {
				String hex = Integer.toHexString(0xff & hash[i]);
				if (hex.length() == 1)
					hexString.append('0');
				hexString.append(hex);
			}
			return hexString.toString();
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	/**
	 * √?p d·ª•ng Ch·ªØ k√Ω ECDSA v√† tr·∫£ v·ª? k·∫øt qu·∫£ (d∆∞·ªõi d·∫°ng byte).
	 * @return byte[]
	 */
	public static byte[] applyECDSASig(PrivateKey privateKey, String input) {
		Signature dsa;
		byte[] output = new byte[0];
		try {
			dsa = Signature.getInstance("ECDSA", "BC");
			dsa.initSign(privateKey);
			byte[] strByte = input.getBytes();
			dsa.update(strByte);
			byte[] realSig = dsa.sign();
			output = realSig;
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return output;
	}
	
	/**
	 * X√°c minh ch·ªØ k√Ω chu·ªói <br>
	 * l·∫•y ch·ªØ k√Ω, kho√° c√¥ng khai v√† chu·ªói d·ªØ li·ªáu v√† tr·∫£ v·ª? true ho·∫∑c false n·∫øu ch·ªØ k√Ω l√† h·ª£p l·ªá
	 * @return true n·∫øu ƒë√∫ng
	 */
	public static boolean verifyECDSASig(PublicKey publicKey, String data, byte[] signature) {
		try {
			Signature ecdsaVerify = Signature.getInstance("ECDSA", "BC");
			ecdsaVerify.initVerify(publicKey);
			ecdsaVerify.update(data.getBytes());
			return ecdsaVerify.verify(signature);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	/**
	 * tr·∫£ v·ª? chu·ªói ƒë∆∞·ª£c m√£ ho√° t·ª´ b·∫•t k·ª≥ kh√≥a n√†o.
	 */
	public static String getStringFromKey(Key key) {
		return Base64.getEncoder().encodeToString(key.getEncoded());
	}
	
	/** 
	 * ƒ?√°nh v√†o m·∫£ng c√°c giao d·ªãch v√† tr·∫£ v·ª? m·ªôt g·ªëc merkle.
	 */
	public static String getMerkleRoot(ArrayList<Transaction> transactions) {
		int count = transactions.size();
		ArrayList<String> previousTreeLayer = new ArrayList<String>();
		for (Transaction transaction : transactions) {
			previousTreeLayer.add(transaction.transactionId);
		}
		ArrayList<String> treeLayer = previousTreeLayer;
		while (count > 1) {
			treeLayer = new ArrayList<String>();
			for (int i = 1; i < previousTreeLayer.size(); i++) {
				treeLayer.add(applySha256(previousTreeLayer.get(i - 1) + previousTreeLayer.get(i)));
			}
			count = treeLayer.size();
			previousTreeLayer = treeLayer;
		}
		String merkleRoot = (treeLayer.size() == 1) ? treeLayer.get(0) : "";
		return merkleRoot;
	}
	
}
